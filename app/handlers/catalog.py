import asyncio
import logging

from aiogram import Router, F
from aiogram.filters import StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup

from app.database.requests.get_data import (get_catalog_item_by_id, get_user_balance_by_tg_id,
                                            get_first_available_proxy_by_type_id,
                                            get_first_available_port_id_by_server_id,
                                            get_current_proxies_price_per_week, get_task_status)
from app.database.requests.save_data import update_proxy_status, create_proxy_rental, decrease_user_balance, \
        update_port_status
from app.database.requests.task_handler import add_task_to_queue, wait_for_task_completion
from app.keyboards.catalog import get_back_catalog_keyboard
from app.keyboards.universal_keyboards import get_confirm_or_cancel_keyboard
from app.menu.menu import send_catalog_page, send_main_menu
from app.utils.login_data_generator import generate_3proxy_credentials
from app.utils.text_generator import get_catalog_item_text

router = Router()


class CatalogStates(StatesGroup):
        waiting_for_product_choice: State = State()
        waiting_for_term_input: State = State()
        is_term_inputting: State = State()
        waiting_for_confirm: State = State()


@router.callback_query(~StateFilter(CatalogStates.is_term_inputting),F.data == "proxy_catalog")
async def handle_catalog_list(callback: CallbackQuery, state: FSMContext):
        await state.set_state(CatalogStates.waiting_for_product_choice)
        await send_catalog_page(callback)


@router.callback_query(CatalogStates.waiting_for_product_choice, F.data.regexp(r'^\d+$'))
async def handle_catalog_product_choice(callback: CallbackQuery, state: FSMContext):
        catalog_id = int(callback.data)
        catalog = await get_catalog_item_by_id(catalog_id)
        user_balance = await get_user_balance_by_tg_id(callback.from_user.id)
        await state.update_data(catalog = catalog)
        await state.update_data(user_balance = user_balance)

        text = get_catalog_item_text(catalog)
        text += (
                "\n\n"
                "‚è≥ <b>–¢–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏:</b>\n"
                "‚ñ∏ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ç–∏–∂–Ω—ñ–≤\n"
                "‚ñ∏ <i>–ê–±–æ <code>0</code> –¥–ª—è –≤—ñ–¥–º—ñ–Ω–∏</i>"
        )

        await callback.message.edit_text(text, parse_mode="HTML", reply_markup=get_back_catalog_keyboard())
        await callback.answer()
        await state.set_state(CatalogStates.waiting_for_term_input)


@router.message(CatalogStates.is_term_inputting)
@router.message(CatalogStates.waiting_for_term_input)
async def handle_price_input(message: Message, state: FSMContext):
        await state.set_state(CatalogStates.is_term_inputting)

        try:
                term = int(message.text)
                if term < 0:
                        raise ValueError
                if term == 0:
                        await state.set_state(CatalogStates.waiting_for_product_choice)
                        await send_catalog_page(message)
                        return

        except ValueError:
                error_text = (
                        "‚ö†Ô∏è <b>–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∏–π –≤–≤—ñ–¥</b>\n\n"
                        "‚åõ –í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å <b>—Ç–∏–∂–Ω—ñ–≤</b> (—Ü—ñ–ª–µ —á–∏—Å–ª–æ > 0)\n"
                        "‚úñÔ∏è –ê–±–æ <code>0</code> –¥–ª—è –≤–∏—Ö–æ–¥—É –≤ –º–µ–Ω—é\n\n"
                        "–ü—Ä–∏–∫–ª–∞–¥: <code>2</code> - –æ—Ä–µ–Ω–¥–∞ –Ω–∞ 2 —Ç–∏–∂–Ω—ñ"
                )
                await message.answer(text=error_text, parse_mode="HTML")
                return

        data = await state.get_data()
        catalog = data.get("catalog")

        price = catalog.get("price_per_week") * term
        await state.update_data(term = term)

        if price > data.get("user_balance"):
                error_text = (
                        "‚ö†Ô∏è <b>–ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –Ω–∞ –±–∞–ª–∞–Ω—Å—ñ</b>\n\n"
                        f"üí≥ <b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> <code>{data.get('user_balance')}</code>\n"
                        f"üí≤ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å –æ—Ä–µ–Ω–¥–∏:</b> <code>{price}</code>\n\n"
                        "‚ÑπÔ∏è –û–±–µ—Ä—ñ—Ç—å –º–µ–Ω—à–∏–π —Ç–µ—Ä–º—ñ–Ω –æ—Ä–µ–Ω–¥–∏:\n"
                        "‚úñÔ∏è –ê–±–æ <code>0</code> –¥–ª—è –≤–∏—Ö–æ–¥—É –≤ –º–µ–Ω—é"
                )
                await message.answer(
                        text=error_text,
                        parse_mode="HTML"
                )
                return

        await state.set_state(CatalogStates.waiting_for_confirm)

        text = get_catalog_item_text(catalog)
        text += (
                "\nüìù <b>–î–µ—Ç–∞–ª—ñ –æ—Ä–µ–Ω–¥–∏</b>\n"
                "‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê\n"
                f"‚è≥ <b>–¢–µ—Ä–º—ñ–Ω:</b> <code>{term}</code> —Ç–∏–∂–Ω—ñ(–≤)\n"
                f"üí≥ <b>–í–∞—Ä—Ç—ñ—Å—Ç—å:</b> <code>{price}</code>\n\n"
                "<b>–ü—ñ–¥—Ç–≤–µ—Ä–¥—ñ—Ç—å –æ—Ä–µ–Ω–¥—É:</b>"
        )
        keyboard= get_confirm_or_cancel_keyboard("confirm_purchase","proxy_catalog")

        await message.answer(text=text, parse_mode="HTML", reply_markup=keyboard)


@router.callback_query(CatalogStates.waiting_for_confirm, F.data == "confirm_purchase")
async def handle_confirm_purchase(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(" ‚è≥ –ó–∞—á–µ–∫–∞–π—Ç–µ...")
    try:
        data = await state.get_data()
        catalog = data.get("catalog")
        term = data.get("term")

        if not catalog or not term:
            raise RuntimeError("‚ùå –î–∞–Ω—ñ –ø—Ä–æ —Ç–æ–≤–∞—Ä –≤—Ç—Ä–∞—á–µ–Ω–æ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        proxy_type_id = catalog.get("proxy_type_id")
        proxy = await get_first_available_proxy_by_type_id(proxy_type_id)
        if not proxy:
            raise RuntimeError("üòî –í—ñ–ª—å–Ω–∏—Ö –ø—Ä–æ–∫—Å—ñ —Ü—å–æ–≥–æ —Ç–∏–ø—É –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î.")

        server_id = proxy.get("server_id")
        port_id = await get_first_available_port_id_by_server_id(server_id)
        if not port_id:
            raise RuntimeError("üòî –í—ñ–ª—å–Ω–∏—Ö –ø—Ä–æ–∫—Å—ñ —Ü—å–æ–≥–æ —Ç–∏–ø—É –∑–∞—Ä–∞–∑ –Ω–µ–º–∞—î.")

        current_price_per_week = await get_current_proxies_price_per_week(catalog.get("id"))
        if not current_price_per_week:
            raise RuntimeError("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ –∞–∫—Ç—É–∞–ª—å–Ω—É —Ü—ñ–Ω—É. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        total_price = current_price_per_week * term
        user_balance = await get_user_balance_by_tg_id(callback.from_user.id)
        if user_balance is None:
            raise RuntimeError("üîç –ù–µ –≤–¥–∞–ª–æ—Å—è –æ—Ç—Ä–∏–º–∞—Ç–∏ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –≤–∞—à –±–∞–ª–∞–Ω—Å.")
        if user_balance < total_price:
            raise RuntimeError(
                f"üí∞ –ù–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è –ø–æ–∫—É–ø–∫–∏.\n\n"
                f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user_balance:.2f}\n"
                f"–í–∞—Ä—Ç—ñ—Å—Ç—å –æ—Ä–µ–Ω–¥–∏: {total_price:.2f}\n\n"
                f"–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–æ–ø–æ–≤–Ω—ñ—Ç—å –±–∞–ª–∞–Ω—Å."
            )

        login_data = await generate_3proxy_credentials()
        if not login_data:
            raise RuntimeError("üîë –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –æ–±–ª—ñ–∫–æ–≤–∏—Ö –¥–∞–Ω–∏—Ö.")

        if not await decrease_user_balance(callback.from_user.id, total_price):
            raise RuntimeError("üí≥ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å–ø–∏—Å–∞–Ω–Ω—ñ –∫–æ—à—Ç—ñ–≤. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.")

        proxy_id = proxy.get("id")
        rental = await create_proxy_rental(
            tg_id=callback.from_user.id,
            proxy_id=proxy_id,
            term=term,
            port_id=port_id,
            login=login_data.get("login"),
            password=login_data.get("password")
        )
        if not rental:
            raise RuntimeError("‚è≥ –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –æ—Ä–µ–Ω–¥–∏. –ó–≤'—è–∂—ñ—Ç—å—Å—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é.")

        if not await update_proxy_status(proxy_id, "Rented"):
            raise RuntimeError("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –ø—Ä–æ–∫—Å—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        if not await update_port_status(port_id, "Rented"):
            raise RuntimeError("‚ö†Ô∏è –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–±—Ä–æ–Ω—é–≤–∞—Ç–∏ –ø–æ—Ä—Ç. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")

        task_id = await add_task_to_queue(
            proxy_id=proxy_id,
            port_id=port_id,
            login=login_data.get("login"),
            password=login_data.get("password")
        )

        if not task_id or not await wait_for_task_completion(task_id, timeout=5):
            raise RuntimeError(
"""
‚è≥ –ß–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏—á–µ—Ä–ø–∞–Ω–æ!

–ù–µ –≤–¥–∞–ª–æ—Å—è –∑–∞–≤–µ—Ä—à–∏—Ç–∏ –æ–±—Ä–æ–±–∫—É –≤–∞—à–æ–≥–æ –∑–∞–ø–∏—Ç—É.
–ú–æ–∂–ª–∏–≤—ñ –ø—Ä–∏—á–∏–Ω–∏:
- –°–µ—Ä–≤–µ—Ä —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π
- –ü–µ—Ä–µ–≤–∏—â–µ–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ

–©–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ –∑—Ä–æ–±–∏—Ç–∏:
1. –¢–æ–≤–∞—Ä –±—É–ª–æ —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–æ –¥–æ <b>üìä –ú–æ—ó –ø—Ä–æ–∫—Å—ñ</b>
2. –ü–µ—Ä–µ–≤—ñ—Ä—Ç–µ –∑'—î–¥–Ω–∞–Ω–Ω—è –∑ –ø—Ä–æ–∫—Å—ñ
3. –Ø–∫—â–æ –≤–∏–Ω–∏–∫–ª–∞ –ø—Ä–æ–±–ª–µ–º–∞ - –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏

üìå –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è–º —Ü—ñ—î—ó —Å–∏—Ç—É–∞—Ü—ñ—ó!
"""
            )


        await callback.message.edit_text(
            "üéâ –í—ñ—Ç–∞—î–º–æ –∑ —É—Å–ø—ñ—à–Ω–æ—é –ø–æ–∫—É–ø–∫–æ—é!\n\n"
            f"–ü–µ—Ä–µ–π–¥—ñ—Ç—å –≤ <b>üìä –ú–æ—ó –ø—Ä–æ–∫—Å—ñ</b>\n", parse_mode="HTML"
        )
        await state.clear()
        await send_main_menu(callback.from_user.id, message=callback.message)

    except RuntimeError as user_error:
        await callback.message.edit_text(str(user_error), parse_mode="HTML")
        await state.set_state(CatalogStates.waiting_for_product_choice)
        await send_catalog_page(callback.message)

    except Exception as e:
        logging.exception(f"Unhandled error in handle_confirm_purchase: {e}")
        await callback.message.edit_text(
            "‚ö°Ô∏è –°—Ç–∞–ª–∞—Å—è –Ω–µ–æ—á—ñ–∫—É–≤–∞–Ω–∞ –ø–æ–º–∏–ª–∫–∞. –ú–∏ –≤–∂–µ –ø—Ä–∞—Ü—é—î–º–æ –Ω–∞–¥ –≤–∏—Ä—ñ—à–µ–Ω–Ω—è–º.\n"
            "–ë—É–¥—å –ª–∞—Å–∫–∞, —Å–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ –∞–±–æ –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –ø—ñ–¥—Ç—Ä–∏–º–∫–∏."
        )
        await state.set_state(CatalogStates.waiting_for_product_choice)
        await send_catalog_page(callback.message)






