from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message

from app.database.requests.save_data import save_operator_to_db
from app.menu.menu import send_admin_panel
from app.keyboards.admin.add_proxies import get_confirm_add_operator_keyboard


class AddOperatorState(StatesGroup):
    waiting_for_country_code = State()
    waiting_for_operator_name = State()
    confirm_data = State()

router = Router()

@router.callback_query(F.data == "add_operator")
async def start_add_operator(callback: CallbackQuery, state: FSMContext):
    await callback.message.edit_text(
        "üåç –í–≤–µ–¥—ñ—Ç—å <b>–∫–æ–¥ –∫—Ä–∞—ó–Ω–∏</b> —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO 3166-1 alpha-2 (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: <code>UA</code>):",
        parse_mode="HTML",
    )
    await state.set_state(AddOperatorState.waiting_for_country_code)
    await callback.answer()


@router.message(AddOperatorState.waiting_for_country_code)
async def process_country_code(message: Message, state: FSMContext):
    code = message.text.strip().upper()

    if not code.isalpha() or len(code) != 2:
        await message.answer(
            "‚ùå –ö–æ–¥ –∫—Ä–∞—ó–Ω–∏ –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ <b>2 –ª–∞—Ç–∏–Ω—Å—å–∫—ñ –ª—ñ—Ç–µ—Ä–∏</b>. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
            parse_mode="HTML",
        )
        return

    await state.update_data(country_code=code)
    await message.answer(
        "üè¢ –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å <b>–Ω–∞–∑–≤—É –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞</b> (–¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤):",
        parse_mode="HTML",
    )
    await state.set_state(AddOperatorState.waiting_for_operator_name)


@router.message(AddOperatorState.waiting_for_operator_name)
async def process_operator_name(message: Message, state: FSMContext):
    name = message.text.strip().upper()

    if len(name) > 20:
        await message.answer("‚ùå –ù–∞–∑–≤–∞ –æ–ø–µ—Ä–∞—Ç–æ—Ä–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –í–≤–µ–¥—ñ—Ç—å –¥–æ 20 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return

    await state.update_data(operator_name=name)
    data = await state.get_data()

    country_code = data["country_code"]
    operator_name = data["operator_name"]

    await message.answer(
        f"üîé –í–∏ –≤–≤–µ–ª–∏:\n\n"
        f"üåç –ö—Ä–∞—ó–Ω–∞: <code>{country_code}</code>\n"
        f"üè¢ –û–ø–µ—Ä–∞—Ç–æ—Ä: <b>{operator_name}</b>\n\n"
        f"–ü—ñ–¥—Ç–≤–µ—Ä–¥—å—Ç–µ –¥—ñ—é:",
        reply_markup=get_confirm_add_operator_keyboard(),
        parse_mode="HTML"
    )

    await state.set_state(AddOperatorState.confirm_data)


@router.callback_query(F.data == "edit_add_operator")
async def edit_add_operator(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.edit_text(
        "üîÅ –î–æ–±—Ä–µ, –ø–æ—á–Ω–µ–º–æ –∑–∞–Ω–æ–≤–æ.\n\nüåç –í–≤–µ–¥—ñ—Ç—å <b>–∫–æ–¥ –∫—Ä–∞—ó–Ω–∏</b> —É —Ñ–æ—Ä–º–∞—Ç—ñ ISO 3166-1 alpha-2:",
        parse_mode="HTML",
        reply_markup = None
    )
    await state.set_state(AddOperatorState.waiting_for_country_code)
    await callback.answer()


@router.callback_query(F.data == "confirm_add_operator")
async def confirm_add_operator(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    country_code = data["country_code"]
    operator_name = data["operator_name"]

    if await save_operator_to_db(country_code, operator_name):
        await callback.message.edit_text(
            f"‚úÖ –û–ø–µ—Ä–∞—Ç–æ—Ä <b>{operator_name}</b> <code>{country_code}</code> —É—Å–ø—ñ—à–Ω–æ –¥–æ–¥–∞–Ω–∏–π!",
            parse_mode="HTML"
        )
    else:
        await callback.message.edit_text(
            f"‚ùå –û–ø–µ—Ä–∞—Ç–æ—Ä <b>{operator_name}</b> <code>{country_code}</code> –≤–∂–µ —ñ—Å–Ω—É—î!",
            parse_mode="HTML")
    await send_admin_panel(callback.message, callback.from_user.id, callback.from_user.first_name)
    await callback.answer()
