import logging

from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import CallbackQuery, Message, InlineKeyboardMarkup
from sqlalchemy import CreateEnginePlugin

from app.database.requests.save_data import save_port_list
from app.filters.isAdmin import IsAdmin
from app.keyboards.universal_keyboards import get_confirm_or_cancel_keyboard, get_back_keyboard
from app.menu.menu import send_server_choice_menu, send_admin_panel

router = Router()

class AddPortsState(StatesGroup):
    waiting_for_server_ip_choice = State()
    waiting_for_ports_input_start = State()
    waiting_for_correct_ports_input = State()
    waiting_for_confirm_data = State()

@router.callback_query(IsAdmin(), F.data == "add_ports")
async def handle_choice_operators(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await state.update_data(is_port_choice = True)
    await send_server_choice_menu(callback, None)
    await state.set_state(AddPortsState.waiting_for_server_ip_choice)


@router.callback_query(IsAdmin(), AddPortsState.waiting_for_server_ip_choice, F.data.regexp(r'^(\d{1,3}\.){3}\d{1,3}$'))
async def handle_start_adding_ports(callback: CallbackQuery, state: FSMContext):
    await state.update_data(server_ip=callback.data)
    await callback.message.edit_text(
        "‚ö†Ô∏è –í–≤–µ–¥—ñ—Ç—å –≤—ñ–¥–∫—Ä–∏—Ç—ñ –ø–æ—Ä—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞:\n"
        "–§–æ—Ä–º–∞—Ç: —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª, —Ç–∏—Ä–µ, –∫–æ–º—É –∞–±–æ –∑ –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫—É\n"
        "–ü—Ä–∏–∫–ª–∞–¥: `8080 9090`/`8080, 9090`/'8001-8090'",
        reply_markup = get_back_keyboard("back_to_server_choice")
    )
    await state.set_state(AddPortsState.waiting_for_ports_input_start)


@router.message(IsAdmin(), AddPortsState.waiting_for_correct_ports_input)
@router.message(IsAdmin(), AddPortsState.waiting_for_ports_input_start)
async def handle_ports_input(message: Message, state: FSMContext):
    await state.set_state(AddPortsState.waiting_for_correct_ports_input)
    try:
        raw_ports = message.text.strip()
        normalized = raw_ports.replace(',', ' ').replace('\n', ' ')

        # –†–æ–∑–±–∏–≤–∞—î–º–æ –Ω–∞ –æ–∫—Ä–µ–º—ñ –ø–æ—Ä—Ç–∏ —Ç–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω–∏
        port_list = []
        for item in normalized.split():
            item = item.strip()
            if not item:
                continue

            # –û–±—Ä–æ–±–∫–∞ –¥—ñ–∞–ø–∞–∑–æ–Ω—É –ø–æ—Ä—Ç—ñ–≤ (—Ñ–æ—Ä–º–∞—Ç: X-Y)
            if '-' in item:
                try:
                    start, end = map(int, item.split('-'))
                    if start > end:
                        start, end = end, start  # –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ—Ä—è–¥–æ–∫

                    if not (1 <= start <= 65535 and 1 <= end <= 65535):
                        await message.reply(f"‚õî –î—ñ–∞–ø–∞–∑–æ–Ω {item} –º—ñ—Å—Ç–∏—Ç—å –Ω–µ–≤–∞–ª—ñ–¥–Ω—ñ –ø–æ—Ä—Ç–∏ (–º–∞—î –±—É—Ç–∏ 1-65535)")
                        return

                    port_list.extend(range(start, end + 1))
                except ValueError:
                    await message.reply(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥—ñ–∞–ø–∞–∑–æ–Ω—É: {item}")
                    return
            else:
                # –û–±—Ä–æ–±–∫–∞ –æ–¥–∏–Ω–æ—á–Ω–æ–≥–æ –ø–æ—Ä—Ç—É
                try:
                    port = int(item)
                    if 1 <= port <= 65535:
                        port_list.append(port)
                    else:
                        await message.reply(f"‚õî –ü–æ—Ä—Ç {port} –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π (–º–∞—î –±—É—Ç–∏ 1-65535)")
                        return
                except ValueError:
                    await message.reply(f"‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –ø–æ—Ä—Ç—É: {item}")
                    return

        if not port_list:
            await message.reply("‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∂–æ–¥–Ω–æ–≥–æ –≤–∞–ª—ñ–¥–Ω–æ–≥–æ –ø–æ—Ä—Ç—É")
            return

        # –í–∏–¥–∞–ª—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏ —Ç–∞ —Å–æ—Ä—Ç—É—î–º–æ
        port_list = sorted(list(set(port_list)))

        # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—Ä—Ç—ñ–≤
        if len(port_list) > 100:
            await message.reply("‚ö†Ô∏è –ó–∞–±–∞–≥–∞—Ç–æ –ø–æ—Ä—Ç—ñ–≤ (–º–∞–∫—Å–∏–º—É–º 100 –∑–∞ —Ä–∞–∑)")
            return

        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞–Ω
        await state.update_data(ports=port_list)

        # –ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
        if len(port_list) <= 10:
            ports_str = ', '.join(map(str, port_list))
        else:
            ports_str = f"{port_list[0]}-{port_list[-1]} ({len(port_list)} –ø–æ—Ä—Ç—ñ–≤)"

        await message.answer(
            f"üìã –û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ—Ä—Ç–∏:\n{ports_str}\n\n–í—Å–µ –≤—ñ—Ä–Ω–æ?",
            reply_markup=get_confirm_or_cancel_keyboard("confirm_ports_adding", "admin_panel"))
        await state.set_state(AddPortsState.waiting_for_confirm_data)

    except Exception as e:
        logging.error(f"–ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ –ø–æ—Ä—Ç—ñ–≤: {e}")
        await message.answer("‚ö†Ô∏è –°—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞. –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑")
        await send_admin_panel(message, message.from_user.id, message.from_user.first_name)
        await state.clear()

@router.callback_query(IsAdmin(),AddPortsState.waiting_for_confirm_data, F.data == "confirm_ports_adding")
async def handle_confirm_ports_adding(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    ports = data['ports']
    server_ip = data['server_ip']
    from app.database.requests.get_data import get_server_id_by_ip
    server_id = await get_server_id_by_ip(server_ip)
    if server_id is not None:
        success_text = await save_port_list(ports, server_id)
        await callback.message.edit_text(success_text)
    else:
        await callback.message.edit_text("‚ùå –°–µ—Ä–≤–µ—Ä –∑ –≤–∫–∞–∑–∞–Ω–æ—é –∞–¥—Ä–µ—Å–æ—é –≤—ñ–¥—Å—É—Ç–Ω—ñ–π")
    await send_admin_panel(callback.message, callback.from_user.id, callback.from_user.first_name)
    await state.clear()

